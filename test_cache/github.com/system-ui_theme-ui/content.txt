Skip to content
Navigation Menu
Product
Solutions
Resources
Open Source
Enterprise
Pricing
Sign in
Sign up
system-ui
/
theme-ui
Public
Notifications
Fork 673
 Star 5.3k
Code
Issues
49
Pull requests
18
Discussions
Actions
Security
Insights
system-ui/theme-ui
 develop
Code
Folders and files
Name	Last commit message	Last commit date

Latest commit
hasparus
Bump versions to: 0.17.2-develop.0 [skip ci]
e6cf9b6
 · 
History
4,714 Commits


.codesandbox
	
Update docs dependencies
	


.github
	
ci: fetch before release
	


.husky/_
	
chore: install auto
	


examples
	
chore(deps): bump next from 14.2.15 to 15.0.3
	


packages
	
Bump versions to: 0.17.2-develop.0 [skip ci]
	


scripts
	
feat: bump deps, including Emotion
	


.all-contributorsrc
	
Update contributors [skip ci]
	


.eslintignore
	
Add .md to .eslintignore
	


.eslintrc.js
	
chore(eslint): disable jsx-pascal-case rule for now
	


.gitignore
	
chore: add .env to .gitignore
	


.npmrc
	
chore(test): make tests work after adopting pnpm
	


.nvmrc
	
wip(mdx): make mdx test run in mjs
	


.pnpmfile.cjs
	
Update lockfile
	


.prettierignore
	
Fix code block syntax colors broken by MDX 2 bump
	


CHANGELOG.md
	
Update CHANGELOG.md [skip ci]
	


CODE_OF_CONDUCT.md
	
Format
	


CONTRIBUTING.md
	
chore: Update Contributing doc with pnpm info
	


LICENSE.md
	
Ran yarn format
	


MIGRATING.md
	
Add missing migration notes on 0.16 to docs
	


README.md
	
Update workspaces setup
	


auto.config.ts
	
chore: disable all-contributors auto plugin
	


babel.config.js
	
Add importSource to babel.config.js
	


codechecks.yml
	
ci(codechecks): use yml
	


jest-preprocess.js
	
chore(gatsby-plugin-theme-ui): make tests work
	


jest.config.ts
	
Update docs dependencies
	


lint-staged.config.js
	
Edit lint-staged config
	


package.json
	
chore: bump Auto
	


pnpm-lock.yaml
	
chore(deps): bump next from 14.2.15 to 15.0.3
	


pnpm-workspace.yaml
	
wip: use PNPM because we need workspace: protocol for tests
	


prettier.config.js
	
docs(examples/next): use TS, variants and improve contrast
	


tsconfig.json
	
Remove occurences of /** @jsx jsx */
	


tsconfig.options.json
	
Remove occurences of /** @jsx jsx */
	


tsconfig.test.json
	
Remove occurences of /** @jsx jsx */
	


vercel.json
	
Group & update all MDX-related docs
	
Repository files navigation
README
Code of conduct
MIT license

Theme UI

The Design Graph Framework

 

   

   
 


Theme UI is a library for creating themeable user interfaces based on constraint-based design principles. Build custom component libraries, design systems, web applications, Gatsby themes, and more with a flexible API for best-in-class developer ergonomics.

stable docs: https://theme-ui.com
develop (prerelease) docs: https://dev.theme-ui.com

Built for design systems, white-labels, themes, and other applications where customizing colors, typography, and layout are treated as first-class citizens and based on a standard Theme Specification, Theme UI is intended to work in a variety of applications, libraries, and other UI components. Colors, typography, and layout styles derived from customizable theme-based design scales help you build UI rooted in constraint-based design principles.

The next evolution of Styled System
From the creators of utility-based, atomic CSS methodologies
Theme-based styling with the sx prop
Compatible with virtually any UI component library
Works with existing Styled System components
Quick mobile-first responsive styles
Built-in support for dark modes
Primitive page layout components
Completely customizable with robust theming
Built with a standard Theme Specification for interoperability
Built with Emotion for scoped styles
Plugin for use in Gatsby sites and themes
Style MDX content with a simple, expressive API
Works with Typography.js themes
Getting Started
npm install theme-ui @emotion/react

If you don't need color modes or components you can install @theme-ui/core.

Any styles in your app can reference values from the global theme object. To provide the theme in context, wrap your application with the ThemeUIProvider component and pass in a custom theme object.

// basic usage
import { ThemeUIProvider } from 'theme-ui'
import theme from './theme'

export default (props) => (
  <ThemeUIProvider theme={theme}>{props.children}</ThemeUIProvider>
)

The theme object follows the System UI Theme Specification, which lets you define custom color palettes, typographic scales, fonts, and more. Read more about theming.

// example theme.js
export default {
  fonts: {
    body: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif',
    heading: '"Avenir Next", sans-serif',
    monospace: 'Menlo, monospace',
  },
  colors: {
    text: '#000',
    background: '#fff',
    primary: '#33e',
  },
}
sx prop

The sx prop works similarly to Emotion's css prop, accepting style objects to add CSS directly to an element in JSX, but includes extra theme-aware functionality. Using the sx prop for styles means that certain properties can reference values defined in your theme object. This is intended to make keeping styles consistent throughout your app the easy thing to do.

The sx prop only works in modules that have defined a custom pragma at the top of the file, which replaces the default React JSX functions. This means you can control which modules in your application opt into this feature without the need for a Babel plugin or additional configuration.

/** @jsxImportSource theme-ui */

export default (props) => (
  <div
    sx={{
      fontWeight: 'bold',
      fontSize: 4, // picks up value from `theme.fontSizes[4]`
      color: 'primary', // picks up value from `theme.colors.primary`
    }}
  >
    Hello
  </div>
)

Read more about how the custom pragma works.

Responsive styles

The sx prop also supports using arrays as values to change properties responsively with a mobile-first approach. This API originated in Styled System and is intended as a terser syntax for applying responsive styles across a singular dimension.

/** @jsxImportSource theme-ui */

export default (props) => (
  <div
    sx={{
      // applies width 100% to all viewport widths,
      // width 50% above the first breakpoint,
      // and 25% above the next breakpoint
      width: ['100%', '50%', '25%'],
    }}
  />
)
Documentation
Theming
The sx Prop
Layout
Color Modes
Theme Spec
Themed
MDX Components
Gatsby Plugin
API

MIT License

Contributors ✨

Thanks goes to these wonderful people (emoji key):


Brent Jackson
🤔 💻 🎨 📖 💡 ⚠️ 👀	
Piotr Monwid-Olechnowicz
💻 📖 ⚠️ 👀 💡	
Dany Castillo
💻 📖 💡 ⚠️	
Jordan Overbye
💻 💡 ⚠️	
Lachlan Campbell
💻 💡 ⚠️ 👀 📖 💬	
John Otander
💻 👀 📖 ⚠️ 🤔	
David Burles
💻 👀 ⚠️ 📖	
Max Stoiber
💻 👀 ⚠️ 💡

Atanas Stoyanov
💻 💬 ⚠️ 🐛 📖	
Lennart
💻 🐛 📖 💡	
Aleksandra Sikora
💻	
LB
💻 ⚠️	
Francis Champagne
💻 🐛 ⚠️ 📖	
Alex Page
💻 📖	
Adam Schay
💻	
Alex
💻 📖

James Edmonds
💻 📖	
Florent SCHILDKNECHT
💻 📖	
Cole Bemis
💻 ⚠️ 📖	
John Letey
📖	
Yuraima Estevez
💻	
Allan Pope
💻 📖	
Emmanuel Pilande
💻	
Justin Hall
💻

Marek
💻 🐛	
Björn Clees
📖 💻	
Iurii Kucherov
📖	
Joe Strouth
💻 🐛	
Stewart Everett
💻	
Travis Arnold
💻 📖	
Ivo Reis
💻	
Benedikt Rötsch
🐛 📖

Jacob Cofman
📖	
John Letey
📖	
Lawrence Gosset
📖	
Markos Konstantopoulos
📖	
Robin Millette
💻	
Rodney Folz
💻	
Rodrigo Pombo
💻 ⚠️ 📖	
Scott Silvi
📖

Shawn Allen
📖	
Tomas Carnecky
💻 🐛	
John Polacek
💻 🐛	
mackie
💻	
Aaron Adams
💻 🐛 📖	
Amberley
💻	
Andreea Năstase
📖	
Anson Low Z.F
🐛 📖

Bernhard Gschwantner
💻	
Bhanu Prakash Korthiwada
📖	
Bruno Lemos
📖	
Bryce Fischer
💻	
Dan Wood
📖	
Debs
📖	
Edward O'Reilly
💻 🐛	
Eric Schaefer
💻

Felix Green
📖	
Gerhard Bliedung
💻 🐛	
Guayo Mena
💡	
Guilherme Lima
📖	
Herb Caudill
📖	
Jacob Bolda
💻 🐛	
Jason Lengstorf
🐛 📖	
Jason Rundell (he/him)
💡

Joe Race
📖	
Kanstantsin Klimashevich
📖	
Eka
📖 🐛	
Keir Williams
📖	
Kristóf Poduszló
💻 🐛 🤔	
Kyle Gill
📖	
Kyle Holmberg
📖	
Jay Laiche
💻

Marc Wiest
💻	
Matheus Teixeira
💻	
matt-cratebind
📖	
Matt Zabriskie
💻	
Maxime Khoy
💻	
Michael Friedman
📖	
Michael Zetterberg fd. Lopez
💻	
Nathan Knowler
💻

Neeraj Lagwankar
📖	
Owen Young
💻	
Patrick Arminio
💻 🐛	
Pedro Duarte
💻	
Ray Clanan
💻	
Rich Werden
📖	
Rob Phoenix
📖 🐛	
Robert Moggach
💻 🐛

Anand Narayan
💻 🐛	
Sam Poder
📖	
Sam Rose
📖	
Sohrab
💻	
Spencer Rinehart
💻	
Steve
📖	
Steve Barton
📖	
Tim Reynolds
💻 🐛

Vinícius Lemes
📖	
Yihwan Kim
💻 🐛	
Yuriy Burychka
📖	
Zolwiastyl
💻	
Amrish Kushwaha
💻	
Joe Bell
💻 🐛	
kenny-loveholidays
💻	
⦇⦀∙ˇ∎ˇ∙⦀⦈
💻 🐛

navsgh
📖	
Shane O'Neill
📖	
汪磊
💻 🐛	
Carolin Maisenbacher
💻 📖 ⚠️	
Alex Chan
📖 💡 ⚠️ 💻	
Kenny
💻	
Jordie Bodlay
📖	
Matt Gleich
📖

William Pei
📖 💡 💻 ⚠️	
Greg Poole
📖	
Akash
📖 💻	
Cannon Lock
📖	
kamatte
📖 💻	
Simen A. W. Olsen
📖 💡 ⚠️ 💻	
Wahid Rahim
📖 💡 💻	
Justin Cooper
📖

CJ
📖 💻

This project follows the all-contributors specification. Contributions of any kind welcome!

About

Build consistent, themeable React apps based on constraint-based design principles

theme-ui.com
Topics
react theme color design ui layout typography style emotion design-tokens mdx design-system
Resources
 Readme
License
 MIT license
Code of conduct
 Code of conduct
 Activity
 Custom properties
Stars
 5.3k stars
Watchers
 42 watching
Forks
 673 forks
Report repository


Releases 174
v0.17.1
Latest
+ 173 releases


Used by 36.5k
+ 36,538


Contributors
138
+ 124 contributors


Languages
TypeScript
59.6%
 
MDX
28.1%
 
JavaScript
11.1%
 
HTML
1.1%
 
Other
0.1%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information