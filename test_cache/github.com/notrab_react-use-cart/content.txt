react-use-cart
--------------

[](https://github.com/notrab/react-use-cart?screenshot=true#--react-use-cart)

üõí A lightweight shopping cart hook for React, Next.js, and Gatsby

[![Image 43: Version](https://camo.githubusercontent.com/3d6092886ed8652777d4feefea70b9f9b3455c2ccd80ed5eaf5ce9d239971285/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d7573652d636172742e737667)](https://npmjs.org/package/react-use-cart)[![Image 44: Downloads/week](https://camo.githubusercontent.com/d4035804119a91adb9e044eec8c8ab44812f5be9169bf26815834ab0291f4605/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f72656163742d7573652d636172742e737667)](https://npmjs.org/package/react-use-cart)[![Image 45: License](https://camo.githubusercontent.com/d2213a72c03a1dd955c88555bac2aa3129f696489fc7c73421db4b43569dabc5/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f72656163742d7573652d636172742e737667)](https://github.com/notrab/react-use-cart/blob/main/package.json)[![Image 46: Forks on GitHub](https://camo.githubusercontent.com/0d2b068407afff9f7127f49572aad00339f103d51fb952f6478de78fb6b3de63/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6e6f747261622f72656163742d7573652d63617274)](https://github.com/notrab/react-use-cart/network/members)[![Image 47: Forks on GitHub](https://camo.githubusercontent.com/1043057948cc38260b537b7492245dc929c25d57bcc20987982d7783cac8b460/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6e6f747261622f72656163742d7573652d63617274)](https://github.com/notrab/react-use-cart/stargazers)[![Image 48: minified + gzip size](https://camo.githubusercontent.com/40a3a43400ed7ab663e3bac1a9a7451d2d0d75042699167f39c290c2758a7808/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f72656163742d7573652d63617274)](https://camo.githubusercontent.com/40a3a43400ed7ab663e3bac1a9a7451d2d0d75042699167f39c290c2758a7808/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f72656163742d7573652d63617274) [![Image 49: Contributors](https://camo.githubusercontent.com/407e3a50d6d1fba38730d0d10d736d8737b07a779a786fc4728c3aca2bcefa63/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d342d6f72616e67652e737667)](https://camo.githubusercontent.com/407e3a50d6d1fba38730d0d10d736d8737b07a779a786fc4728c3aca2bcefa63/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d342d6f72616e67652e737667)

Why?
----

[](https://github.com/notrab/react-use-cart?screenshot=true#why)

*   [![Image 50: Bundle size](https://camo.githubusercontent.com/40a3a43400ed7ab663e3bac1a9a7451d2d0d75042699167f39c290c2758a7808/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f72656163742d7573652d63617274)](https://camo.githubusercontent.com/40a3a43400ed7ab663e3bac1a9a7451d2d0d75042699167f39c290c2758a7808/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f72656163742d7573652d63617274)
*   **No dependencies**
*   üí≥ Not tied to any payment gateway, or checkout - create your own!
*   üî• Persistent carts with local storage, or your own adapter
*   ‚≠êÔ∏è Supports multiples carts per page
*   üõí Flexible cart item schema
*   ü•û Works with Next, Gatsby, React
*   ‚ôªÔ∏è Trigger your own side effects with cart handlers (on item add, update, remove)
*   üõ† Built with TypeScript
*   ‚úÖ Fully tested
*   üåÆ Used by [Dines](https://dines.co.uk/?ref=react-use-cart)

Quick Start
-----------

[](https://github.com/notrab/react-use-cart?screenshot=true#quick-start)

[Demo](https://codesandbox.io/s/react-use-cart-3c7vm)

import { CartProvider, useCart } from "react-use-cart";

function Page() {
  const { addItem } \= useCart();

  const products \= \[
    {
      id: 1,
      name: "Malm",
      price: 9900,
      quantity: 1
    },
    {
      id: 2,
      name: "Nordli",
      price: 16500,
      quantity: 5
    },
    {
      id: 3,
      name: "Kullen",
      price: 4500,
      quantity: 1
    },
  \];

  return (
    <div\>
      {products.map((p) \=\> (
        <div key\={p.id}\>
          <button onClick\={() \=\> addItem(p)}\>Add to cart</button\>
        </div\>
      ))}
    </div\>
  );
}

function Cart() {
  const {
    isEmpty,
    totalUniqueItems,
    items,
    updateItemQuantity,
    removeItem,
  } \= useCart();

  if (isEmpty) return <p\>Your cart is empty</p\>;

  return (
    <\>
      <h1\>Cart ({totalUniqueItems})</h1\>

      <ul\>
        {items.map((item) \=\> (
          <li key\={item.id}\>
            {item.quantity} x {item.name} &mdash;
            <button
              onClick\={() \=\> updateItemQuantity(item.id, (item.quantity ?? 0) \- 1)}
            \>
              -
            </button\>
            <button
              onClick\={() \=\> updateItemQuantity(item.id, (item.quantity ?? 0) + 1)}
            \>
              +
            </button\>
            <button onClick\={() \=\> removeItem(item.id)}\>&times;</button\>
          </li\>
        ))}
      </ul\>
    </\>
  );
}

function App() {
  return (
    <CartProvider\>
      <Page /\>
      <Cart /\>
    </CartProvider\>
  );
}

Install
-------

[](https://github.com/notrab/react-use-cart?screenshot=true#install)

npm install react-use-cart # yarn add react-use-cart

`CartProvider`
--------------

[](https://github.com/notrab/react-use-cart?screenshot=true#cartprovider)

You will need to wrap your application with the `CartProvider` component so that the `useCart` hook can access the cart state.

Carts are persisted across visits using `localStorage`, unless you specify your own `storage` adapter.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage)

import React from "react";
import ReactDOM from "react-dom";
import { CartProvider } from "react-use-cart";

ReactDOM.render(
  <CartProvider\>{/\* render app/cart here \*/}</CartProvider\>,
  document.getElementById("root")
);

#### Props

[](https://github.com/notrab/react-use-cart?screenshot=true#props)

| Prop | Required | Description |
| --- | --- | --- |
| `id` | _No_ | `id` for your cart to enable automatic cart retrieval via `window.localStorage`. If you pass a `id` then you can use multiple instances of `CartProvider`. |
| `onSetItems` | _No_ | Triggered only when `setItems` invoked. |
| `onItemAdd` | _No_ | Triggered on items added to your cart, unless the item already exists, then `onItemUpdate` will be invoked. |
| `onItemUpdate` | _No_ | Triggered on items updated in your cart, unless you are setting the quantity to `0`, then `onItemRemove` will be invoked. |
| `onItemRemove` | _No_ | Triggered on items removed from your cart. |
| `onEmptyCart` | _No_ | Triggered on empty cart. |
| `storage` | _No_ | Must return `[getter, setter]`. |
| `metadata` | _No_ | Custom global state on the cart. Stored inside of `metadata`. |

`useCart`
---------

[](https://github.com/notrab/react-use-cart?screenshot=true#usecart)

The `useCart` hook exposes all the getter/setters for your cart state.

### `setItems(items)`

[](https://github.com/notrab/react-use-cart?screenshot=true#setitemsitems)

The `setItems` method should be used to set all items in the cart. This will overwrite any existing cart items. A `quantity` default of 1 will be set for an item implicitly if no `quantity` is specified.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args)

*   `items[]` (**Required**): An array of cart item object. You must provide an `id` and `price` value for new items that you add to cart.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-1)

import { useCart } from "react-use-cart";

const { setItems } \= useCart();

const products \= \[
  {
    id: "ckb64v21u000001ksgw2s42ku",
    name: "Fresh Foam 1080v9",
    brand: "New Balance",
    color: "Neon Emerald with Dark Neptune",
    size: "US 10",
    width: "B - Standard",
    sku: "W1080LN9",
    price: 15000,
  },
  {
    id: "cjld2cjxh0000qzrmn831i7rn",
    name: "Fresh Foam 1080v9",
    brand: "New Balance",
    color: "Neon Emerald with Dark Neptune",
    size: "US 9",
    width: "B - Standard",
    sku: "W1080LN9",
    price: 15000,
  },
\];

setItems(products);

### `addItem(item, quantity)`

[](https://github.com/notrab/react-use-cart?screenshot=true#additemitem-quantity)

The `addItem` method should be used to add items to the cart.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-1)

*   `item` (**Required**): An object that represents your cart item. You must provide an `id` and `price` value for new items that you add to cart.
*   `quantity` (_optional_, **default**: `1`): The amount of items you want to add.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-2)

import { useCart } from "react-use-cart";

const { addItem } \= useCart();

const product \= {
  id: "cjld2cjxh0000qzrmn831i7rn",
  name: "Fresh Foam 1080v9",
  brand: "New Balance",
  color: "Neon Emerald with Dark Neptune",
  size: "US 9",
  width: "B - Standard",
  sku: "W1080LN9",
  price: 15000,
};

addItem(product, 2);

### `updateItem(itemId, data)`

[](https://github.com/notrab/react-use-cart?screenshot=true#updateitemitemid-data)

The `updateItem` method should be used to update items in the cart.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-2)

*   `itemId` (**Required**): The cart item `id` you want to update.
*   `data` (**Required**): The updated cart item object.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-3)

import { useCart } from "react-use-cart";

const { updateItem } \= useCart();

updateItem("cjld2cjxh0000qzrmn831i7rn", {
  size: "UK 10",
});

### `updateItemQuantity(itemId, quantity)`

[](https://github.com/notrab/react-use-cart?screenshot=true#updateitemquantityitemid-quantity)

The `updateItemQuantity` method should be used to update an items `quantity` value.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-3)

*   `itemId` (**Required**): The cart item `id` you want to update.
*   `quantity` (**Required**): The updated cart item quantity.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-4)

import { useCart } from "react-use-cart";

const { updateItemQuantity } \= useCart();

updateItemQuantity("cjld2cjxh0000qzrmn831i7rn", 1);

### `removeItem(itemId)`

[](https://github.com/notrab/react-use-cart?screenshot=true#removeitemitemid)

The `removeItem` method should be used to remove an item from the cart.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-4)

*   `itemId` (**Required**): The cart item `id` you want to remove.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-5)

import { useCart } from "react-use-cart";

const { removeItem } \= useCart();

removeItem("cjld2cjxh0000qzrmn831i7rn");

### `emptyCart()`

[](https://github.com/notrab/react-use-cart?screenshot=true#emptycart)

The `emptyCart()` method should be used to remove all cart items, and resetting cart totals to the default `0` values.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-6)

import { useCart } from "react-use-cart";

const { emptyCart } \= useCart();

emptyCart();

### `clearCartMetadata()`

[](https://github.com/notrab/react-use-cart?screenshot=true#clearcartmetadata)

The `clearCartMetadata()` will reset the `metadata` to an empty object.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-7)

import { useCart } from "react-use-cart";

const { clearCartMetadata } \= useCart();

clearCartMetadata();

### `setCartMetadata(object)`

[](https://github.com/notrab/react-use-cart?screenshot=true#setcartmetadataobject)

The `setCartMetadata()` will replace the `metadata` object on the cart. You must pass it an object.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-5)

*   `object`: A object with key/value pairs. The key being a string.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-8)

import { useCart } from "react-use-cart";

const { setCartMetadata } \= useCart();

setCartMetadata({ notes: "This is the only metadata" });

### `updateCartMetadata(object)`

[](https://github.com/notrab/react-use-cart?screenshot=true#updatecartmetadataobject)

The `updateCartMetadata()` will update the `metadata` object on the cart. You must pass it an object. This will merge the passed object with the existing metadata.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-6)

*   `object`: A object with key/value pairs. The key being a string.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-9)

import { useCart } from "react-use-cart";

const { updateCartMetadata } \= useCart();

updateCartMetadata({ notes: "Leave in shed" });

### `items = []`

[](https://github.com/notrab/react-use-cart?screenshot=true#items--)

This will return the current cart items in an array.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-10)

import { useCart } from "react-use-cart";

const { items } \= useCart();

### `isEmpty = false`

[](https://github.com/notrab/react-use-cart?screenshot=true#isempty--false)

A quick and easy way to check if the cart is empty. Returned as a boolean.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-11)

import { useCart } from "react-use-cart";

const { isEmpty } \= useCart();

### `getItem(itemId)`

[](https://github.com/notrab/react-use-cart?screenshot=true#getitemitemid)

Get a specific cart item by `id`. Returns the item object.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-7)

*   `itemId` (**Required**): The `id` of the item you're fetching.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-12)

import { useCart } from "react-use-cart";

const { getItem } \= useCart();

const myItem \= getItem("cjld2cjxh0000qzrmn831i7rn");

### `inCart(itemId)`

[](https://github.com/notrab/react-use-cart?screenshot=true#incartitemid)

Quickly check if an item is in the cart. Returned as a boolean.

#### Args

[](https://github.com/notrab/react-use-cart?screenshot=true#args-8)

*   `itemId` (**Required**): The `id` of the item you're looking for.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-13)

import { useCart } from "react-use-cart";

const { inCart } \= useCart();

inCart("cjld2cjxh0000qzrmn831i7rn") ? "In cart" : "Not in cart";

### `totalItems = 0`

[](https://github.com/notrab/react-use-cart?screenshot=true#totalitems--0)

This returns the totaly quantity of items in the cart as an integer.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-14)

import { useCart } from "react-use-cart";

const { totalItems } \= useCart();

### `totalUniqueItems = 0`

[](https://github.com/notrab/react-use-cart?screenshot=true#totaluniqueitems--0)

This returns the total unique items in the cart as an integer.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-15)

import { useCart } from "react-use-cart";

const { totalUniqueItems } \= useCart();

### `cartTotal = 0`

[](https://github.com/notrab/react-use-cart?screenshot=true#carttotal--0)

This returns the total value of all items in the cart.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-16)

import { useCart } from "react-use-cart";

const { cartTotal } \= useCart();

### `metadata = {}`

[](https://github.com/notrab/react-use-cart?screenshot=true#metadata--)

This returns the metadata set with `updateCartMetadata`. This is useful for storing additional cart, or checkout values.

#### Usage

[](https://github.com/notrab/react-use-cart?screenshot=true#usage-17)

import { useCart } from "react-use-cart";

const { metadata } \= useCart();

Contributors ‚ú®
--------------

[](https://github.com/notrab/react-use-cart?screenshot=true#contributors-)

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!