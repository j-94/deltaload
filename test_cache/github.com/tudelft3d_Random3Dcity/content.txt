Random3Dcity
------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#random3dcity)

A basic procedural modelling engine for generating random (synthetic) buildings and other features in CityGML in multiple levels of detail (LOD).

[![Image 18: Overview](https://camo.githubusercontent.com/98a0a107ec680b0a9084805adf1b5c8150d01ef3b5e33916789fae8e5e557a18/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d696e746572696f722e706e67)](https://camo.githubusercontent.com/98a0a107ec680b0a9084805adf1b5c8150d01ef3b5e33916789fae8e5e557a18/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d696e746572696f722e706e67)

Ready to use datasets
---------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#ready-to-use-datasets)

If you are interested only in the datasets, without the need to run the code, please visit [my webpage to download a prepared collection of datasets](http://filipbiljecki.com/code/Random3Dcity.html).

Introduction
------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#introduction)

CityGML data (semantically structured 3D city models) in multiple LODs are not available. This project presents an effort to bridge this gap, by developing a basic procedural modelling engine which generates random CityGML buildings to test software and carry out various experiments. This experimental software prototype was developed as a part of my [PhD research](http://filipbiljecki.com/phd.html).

The engine is composed of two modules. The first one is procedural: it randomly generates buildings and their elements according to a set of rules and constraints. The buildings are realised through parameters which are stored in an XML form. The second part of the engine reads this data and constructs CityGML data in multiple LODs.

What Random3Dcity is not
------------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#what-random3dcity-is-not)

Random3Dcity is not intended to compete with ESRI's CityEngine and similar tools, which are focused on taking real-world data and augmenting them for various purposes such as urban planning. This tool is far from that: it simply provides synthetic CityGML data in multiple levels of detail.

Please be aware that the tool cannot be used for production purposes, it's merely for research objectives addressing the lack of multi-LOD CityGML data sets.

Potential uses
--------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#potential-uses)

The data generated by the engine has been used for a variety of applications where real-world data is not of importance:

*   Source of CityGML data not burdened by topological errors.
*   Testing multi-LOD CityGML software implementations, e.g. database solutions to compress data.
*   Multi-LOD experiments, e.g. determining the optimal LOD for a spatial analysis.
*   Developing 3D use cases, and testing the complexity of each LOD.

Conditions for use and citation
-------------------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#conditions-for-use-and-citation)

This software is free to use. You are kindly requested to credit its use by citing it in a research paper you are writing, reports, and/or other applicable materials. Please cite the following paper ([PDF](http://doi.org/10.5194/isprs-annals-IV-4-W1-51-2016)):

Biljecki, F., Ledoux, H., & Stoter, J. (2016). Generation of multi-LOD 3D city models in CityGML with the procedural modelling engine Random3Dcity. ISPRS Ann. Photogramm. Remote Sens. Spatial Inf. Sci., IV-4/W1, 51â€“59. [http://doi.org/10.5194/isprs-annals-IV-4-W1-51-2016](http://doi.org/10.5194/isprs-annals-IV-4-W1-51-2016)

BibTeX entry:

```
@article{random3dcity,
    Author = {Biljecki, Filip and Ledoux, Hugo and Stoter, Jantien},
    Doi = {10.5194/isprs-annals-IV-4-W1-51-2016},
    Journal = {ISPRS Ann. Photogramm. Remote Sens. Spatial Inf. Sci.},
    Pages = {51--59},
    Pdf = {http://www.isprs-ann-photogramm-remote-sens-spatial-inf-sci.net/IV-4-W1/51/2016/isprs-annals-IV-4-W1-51-2016.pdf},
    Title = {{Generation of multi-LOD 3D city models in CityGML with the procedural modelling engine Random3Dcity}},
    Vol = {IV-4/W1},
    Year = {2016}
}
```

Furthermore, I will be very happy to hear if you find this tool useful for your workflow. If you find it useful and/or have suggestions for its improvement, please let me know.

System requirements
-------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#system-requirements)

Python packages:

*   [Numpy](http://docs.scipy.org/doc/numpy/user/install.html) (likely already on your system)
*   [lxml](http://lxml.de/)
*   [Fish](https://pypi.python.org/pypi/fish/)

If not on your system please install them, it's easy with `pip`.

### OS and Python version

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#os-and-python-version)

Both Python 2 and Python 3 are supported.

The software has been developed and tested on Mac OS X, and has not been tested with other configurations. Hence, it is possible that some of the functions will not work on Windows.

Features and technical details
------------------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#features-and-technical-details)

### Roof types and building parts

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#roof-types-and-building-parts)

The engine supports five types of roofs: flat, gabled, hipped, pyramidal, and shed. Further, it supports also building parts such as garages and alcoves.

[![Image 19: Roofs](https://camo.githubusercontent.com/407060d37f711d90dfe35792bac2bdd07d74de75144acb2d171d8ac41b552a11/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726f6f6654797065732e706e67)](https://camo.githubusercontent.com/407060d37f711d90dfe35792bac2bdd07d74de75144acb2d171d8ac41b552a11/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726f6f6654797065732e706e67)

### 16 Levels of detail

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#16-levels-of-detail)

The engine supports generating data in 16 levels of detail. The following composite render shows an example of four LODs:

[![Image 20: LOD-composite](https://camo.githubusercontent.com/a232091488c3b4bed9c4c1e443e26f659705ec4cfffea69e76b911d7d97aafb0/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d4c4f442d636f6d706f736974652e706e67)](https://camo.githubusercontent.com/a232091488c3b4bed9c4c1e443e26f659705ec4cfffea69e76b911d7d97aafb0/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d4c4f442d636f6d706f736974652e706e67)

The following image shows the specification of our novel LOD specification ("Delft LODs") according to which the models are generated. This specification will be published in details.

[![Image 21: LOD-refined-specification](https://camo.githubusercontent.com/1eefccaec175dfcd225cb7f5342c08288cf5af39aa8c7b78a13b1fabb34fbfef/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726566696e65644c4f44732e706e67)](https://camo.githubusercontent.com/1eefccaec175dfcd225cb7f5342c08288cf5af39aa8c7b78a13b1fabb34fbfef/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726566696e65644c4f44732e706e67)

### Geometric references

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#geometric-references)

Besides the LODs, the engine generates multiple representations according to geometric references within LODs, e.g. an LOD1 with varying heights of the top surface (height at the eaves, at the half of the roof, etc.)

[![Image 22: Geometric references](https://camo.githubusercontent.com/93dbc927f7a4c5427a086c5339948e30256beff823d5a4d53abccabe4341fa66/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d4c4f443163622e706e67)](https://camo.githubusercontent.com/93dbc927f7a4c5427a086c5339948e30256beff823d5a4d53abccabe4341fa66/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d4c4f443163622e706e67)

### Solids

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#solids)

Each representation is constructed its corresponding solid.

[![Image 23: Solids](https://camo.githubusercontent.com/03b04aa5f24b27756b5c993c77213456e92d75148332e033ee23bff455db3ed1/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d617373656d626c696e67536f6c69642e706e67)](https://camo.githubusercontent.com/03b04aa5f24b27756b5c993c77213456e92d75148332e033ee23bff455db3ed1/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d617373656d626c696e67536f6c69642e706e67)

### Vegetation and streets

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#vegetation-and-streets)

An experimental feature is the generation of vegetation and streets.

[![Image 24: Other-features](https://camo.githubusercontent.com/afed6e93f913efd540ffce876852700924bfb244e18b7a013a27794e1a8fc7d6/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726f6164732e706e67)](https://camo.githubusercontent.com/afed6e93f913efd540ffce876852700924bfb244e18b7a013a27794e1a8fc7d6/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d726f6164732e706e67)

### Interior of buildings

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#interior-of-buildings)

A basic interior of buildings in three LODs may be generated: see the header in the attachment. This is based on another paper from my group that deals with the refinement of the level of detail concept for interior features. Besides the solids for each floor, a 2D representation per each storey, and a solid for the whole building (offset from the walls) may be generated.

Documented uses
---------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#documented-uses)

Besides my [PhD](http://filipbiljecki.com/phd.html) in which I did a lot of experiments and benchmarking with CityGML data, the engine has been used for testing validation and repair software, and other purposes such as error propagation. For the full showcase visit the [data page](http://filipbiljecki.com/code/Random3Dcity.html).

Usage and options
-----------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#usage-and-options)

### Randomising the city

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#randomising-the-city)

To generate buildings run

```
python randomiseCity.py -o /path/to/the/building/file.xml -n 4000
```

where `n` is the number of buildings to be generated. If you don't specify the number of buildings, by default the program will generate 1000 buildings. Please use absolute paths.

To realise these buildings as a 3D city model in CityGML in multiple levels of detail run:

```
python generateCityGML.py -i /path/to/the/building/file.xml -o /path/to/CityGML/directory/
```

Don't forget to put the `/` at the end of the directory. Again, please use absolute paths.

### Rotation

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#rotation)

If you want to have the buildings rotated randomly, in both commands toggle the flag `-r 1`.

### Building parts

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#building-parts)

Building parts (garages, warehouses, alcoves) are generated with the flag `-p 1`.

### Vegetation and street network

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#vegetation-and-street-network)

Vegetation and street network are generated with the flags `-v 1` and `-s 1`, respectively.

### Solids and geometric references

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#solids-and-geometric-references)

`generateCityGML.py` generates solids with the option `-ov 1`, and all geometric references with `-gr 1`.

### gml:id according to UUID

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#gmlid-according-to-uuid)

It is possible to generate an UUID for each gml:Polygon with the option `-id 1`.

### Coordinate system

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#coordinate-system)

By default, buildings are placed in a local coordinate system. If you run the building randomiser with the option `-c 1`, the buildings will be placed in the Dutch coordinate system (RD new), somewhere in the Nordoostpolder in the Netherlands. You can easily customise this in the code. You don't have to toggle `-c 1` in the second script (`generateCityGML.py`).

### Reporting of the progress

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#reporting-of-the-progress)

When running `generateCityGML.py` it is possible to get the report of the progress of the script with `-rp 1`. This option is turned on by default. However, there have been reports of bugs when using Python3, so the option disables itself automatically if the underlying dependency cannot be loaded. Should you run into problems, disable it with `-rp 0`.

Performance
-----------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#performance)

The speed mainly depends on the invoked options. With all the options the engine generates around 100 buildings per minute. The computational complexity is not strictly linear, and a high number of buildings (\>20000) will likely eat all of your RAM making the process slower. If you need to generate more than tens of thousands of buildings, consider not generating all LODs and representations (e.g. solids).

Known issues and limitations
----------------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#known-issues-and-limitations)

### CityGML issues

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#citygml-issues)

*   The output files are stored in CityGML 2.0. Output in the legacy versions 0.4 and 1.0 is not available.

### Running issues

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#running-issues)

The `generateCityGML.py` program has been known to crash in two cases:

*   It runs out of memory if too many buildings are attempted to be generated in CityGML. Reduce the number of buildings and/or their variants (e.g. disable the generation of solids).
*   Rarely it crashes when it encounters a very peculiar building to be generated (despite the established rules and constraints), some weird-looking buildings can still occur). This does not happen often, and when it does just generate a new set of buildings with `randomiseCity.py`.

### General limitations

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#general-limitations)

*   While this software prototype generates virtually unlimited CityGML data for free from scratch and in multiple LODs, which can be used for a multitude of purposes, this is not a commercial procedural modelling engine that can be considered as a complete standalone solution in many production workflows.

Special datasets
----------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#special-datasets)

I have prepared a number of intentionally impaired datasets suited for different types of experiments, such as overlapping buildings and simulated geometric errors. For the full list visit the [data page](http://filipbiljecki.com/code/Random3Dcity.html).

[![Image 25: Intentional errors](https://camo.githubusercontent.com/361172bfff5eb7a9715ac772ae23a27053dffdee6da94f8d6a6c670315b9ee8e/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d6f7665726c617070696e672e706e67)](https://camo.githubusercontent.com/361172bfff5eb7a9715ac772ae23a27053dffdee6da94f8d6a6c670315b9ee8e/687474703a2f2f66696c697062696c6a65636b692e636f6d2f636f64652f696d672f52332d6f7665726c617070696e672e706e67)

Contact for questions and feedback
----------------------------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#contact-for-questions-and-feedback)

Feel free to contact me should you have questions:

Filip Biljecki

[3D geoinformation research group](https://3d.bk.tudelft.nl/)

Delft University of Technology

email: fbiljecki at gmail dot com

[Personal webpage](http://filipbiljecki.com/)

Acknowledgments
---------------

[](https://github.com/tudelft3d/Random3Dcity?screenshot=true#acknowledgments)

*   This research is supported by the Dutch Technology Foundation STW, which is part of the Netherlands Organisation for Scientific Research (NWO), and which is partly funded by theÂ Ministry of Economic Affairs (project code: 11300).
    
*   People who gave suggestions and reported errors, especially MickaÃ«l Brasebin (IGN France) for the suggestions to make the code compatible with Python3.