Note: Reflex is still in **development** and we are actively working on the documentation.

Add styles to your site using Theme UI and Style props.

[Theme UI](https://sbs-www.vercel.app/docs/theming#theme-ui)
------------------------------------------------------------

Reflex uses [Theme UI](https://theme-ui.com/) for styling. Theme UI is a CSS-in-JS library for creating constraint-based designs.

What this means is you create a shared set of values such as colors, font sizes, and spacing and then reference these values to build your site.

Here's a simple theme:

src/gatsby-theme-base/theme.js

export default {

colors: {

text: "#000",

background: "#fff"

primary: "#82aaff",

},

fontSizes: \[14, 16, 18, 20, 22, 36, 56, 72\],

}

You can then use values from this theme in your components.

<Button bg\="primary" color\="text" fontSize\="2"\>

Styled button

</Button\>

This will create a `button` with the following CSS styles:

{

background-color: "#82aaff", // --\> colors.primary

color: "#000", // --\> colors.text

font-size: "18px" // --\> fontSizes\[2\]

}

[Style props](https://sbs-www.vercel.app/docs/theming#style-props)
------------------------------------------------------------------

Style props is using CSS attributes as props. All [components](https://sbs-www.vercel.app/docs/components) and [blocks](https://sbs-www.vercel.app/docs/blocks) can use style props.

<Button bg\="primary" color\="text" px\="3" py\="2"\>

Button

</Button\>

<P fontSize\="2" fontWeight\="semi"\>

This is a paragraph

</P\>

<Grid col\="1fr 1fr" gap\="2"\>

<Div\>First column</Div\>

<Div\>Second column</Div\>

</Grid\>

[Create a theme](https://sbs-www.vercel.app/docs/theming#create-a-theme)
------------------------------------------------------------------------

Let's start by creating a simple theme.

Create the following file in your site: `src/@reflexjs/gatsby-theme-base/theme.js`. This is where you are going to define your theme values.

Let's add some `colors`, `fontSizes` and `lineHeights`.

src/gatsby-theme-base/theme.js

export default {

colors: {

text: "#000",

background: "#fff",

primary: "#07c",

},

fonts: {

body: '"Segoe UI", Roboto, "Helvetica Neue", sans-serif',

heading: "Georgia, serif",

monospace: "Menlo, monospace",

},

fontSizes: \[12, 14, 16, 20, 24, 32, 48, 64\],

fontWeights: {

body: 400,

heading: 700,

bold: 700,

},

lineHeights: {

body: 1.5,

heading: 1.125,

},

letterSpacings: {

body: "normal",

caps: "0.2em",

},

}

[Styling](https://sbs-www.vercel.app/docs/theming#styling)
----------------------------------------------------------

Once you have created your theme, you can now use the theme values in any `.mdx` or `React` component.

<H1 fontFamily\="heading" fontSize\="5" lineHeight\="heading" color\="text"\>

This is heading

</H1\>

[Responsive](https://sbs-www.vercel.app/docs/theming#responsive)
----------------------------------------------------------------

Theme UI includes a shorthand syntax for writing mobile-first responsive styles.

Define your breakpoints in your theme file:

src/gatsby-theme-base/theme.js

export default {

...

breakpoints: \[\`768px\`, \`1024px\`, \`1280px\`\],

...

}

Then use an array-like syntax to style components.

<Grid col\="1fr|1fr 1fr"\>

<Div\>First</Div\>

<Div\>Second</Div\>

</Grid\>

<Button fontSize\="2|4|6" colors\="primary|secondary"\>

Button

</Button\>

**Tip**: You can also use an array-like syntax for responsive values.

<Button fontSize\={\[2, 4, 6\]} colors\={\["primary", "secondary"\]}\>

Button

</Button\>

[Hover and focus](https://sbs-www.vercel.app/docs/theming#hover-and-focus)
--------------------------------------------------------------------------

Hover, focus and other CSS pseudo-classes have equivalent style props by using a prefix. Examples: `hoverBg`, `hoverColor`, and `hoverBorderColor`.

<Button bg\="primary" hoverBg\="secondary" focusBorderWidth\="1px"\>

Button

</Button\>

[Variants](https://sbs-www.vercel.app/docs/theming#variants)
------------------------------------------------------------

If you find yourself repeating common styles for the same components, you can abstract the styles into a variant.

Every component has support for variants. See example below:

src/gatsby-theme-base/theme.js

export default {

...

colors: {

text: "#000",

background: "#fff",

primary: "#07c",

},

fontSizes: \[12, 14, 16, 20, 24, 32, 48, 64\],

radii: {

xs: ".1rem",

sm: ".2rem",

md: ".25rem",

lg: ".5rem",

},

...

button: {

border: "1px solid",

borderRadius: "sm",

fontSize: 2,

primary: {

bg: "primary",

},

secondary: {

bg: "secondary",

},

lg: {

fontSize: 4,

}

}

}

To use variant, simply pass in values to the `variant` prop.

<Button variant\="primary"\>Primary button</Button\>

You can also use multiple variants.

<Button variant\="primary lg"\>Large Primary button</Button\>